@startuml
actor Student as S
participant Interface as I
participant informationSheetManager as IS
database Student_DB as D

title = Filling the information sheet

S -> I : openInformationSheetInterface()
activate I
I -> IS : loadIS(studentID)
activate IS
IS -> D : load(studentID)
activate D
IS <- D : sendInfos(studentID)
deactivate D
I <- IS : generateIS(studentID)
S <- I : displayInformationSheetInterface()

opt

  S -> I : validatePriorExperience()
  I -> IS : validatePriorExperience(studentID)
  IS -> D : validatePriorExperience(studentID)
  activate D
  D -> D : validatePriorExperience(studentID)
  D -> IS : updatingDone()
  deactivate D
  IS -> I : updatingDone()
  I -> S : displayMessage("The update is done")
  
end 

loop While(!sheetComplete || !confirmation )

  S -> I: updateInfos(infos)
  I->IS: updateInfos(infos, studentID)
  IS -> D : updateInfos(infos, studentID)
  activate D
  D -> D :  updateInfos(infos, studentID)
  D -> IS : updatingDone()
  deactivate D
  
  alt !sheetComplete
     IS -> I : ISNotComplete(studentID)
     S <- I : displayMessage("The information sheet is not complete")
  else sheetComplete
     IS -> I: askConfirmation(studentID)
     S <- I : askConfirmation()
     alt confirmation
         S -> I : confirmation()
         I -> IS : confirmation(studentID)
         IS -> D : updateInfos(confirmation, studentID)
         activate D
         D -> D :  updateInfos(confirmation, studentID)
         D -> IS : updatingDone()
         deactivate D
         IS -> I : updatingDone(studentID)
         S <- I : displayMessage("The information sheet has been updated")
     else !confirmation
         S -> I : refusal()
         I -> IS : refusal(studentID)
         I <- IS : askCompletion(studentID)
         deactivate IS
         S <- I : askCompletion()
         deactivate I
     end
  end
end
I -> Supervisor : notify("The student " + studentID + " has completed his information sheet", supervisorID)
@enduml
