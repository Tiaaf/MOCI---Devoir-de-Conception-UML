@startuml
actor EducationDepartement as ED
participant Interface as I
participant yearManager as nYM
database Student_DB as SDB

title = Initialisation


ED -> I : openUpdateYearInterface()
activate I
I -> nYM : loadYear()
activate nYM
nYM -> SDB : load()
activate SDB
SDB -> nYM : sendYearInfos()
deactivate SDB
nYM -> I : generateStudentList() 
deactivate nYM
ED <- I : displayUpdateYearInterface()

== Deleting students ==

opt
ED -> I : deleteStudents(studentsIDList)
I -> nYM : deleteStudents(studentsIDList)
activate nYM
nYM -> SDB : deleteStudents(studentsIDList)
activate SDB
SDB -> nYM : updatingDone()
deactivate SDB
nYM -> I : deletingDone()
deactivate nYM
I -> ED : displayMessage("The students have been deleted")
end

== Updating students ==

opt
ED -> I : updateStudents([studentID, studentInfos]+)
I -> nYM : updateStudents([studentID, studentInfos]+)
activate nYM
nYM -> SDB :updateStudents([studentID, studentInfos]+)
activate SDB
SDB -> nYM : updatingDone()
deactivate SDB
nYM -> I : updatingDone()
deactivate nYM
I -> ED : displayMessage("The students have been updated")
end
 
== Adding students ==


ED -> I : addStudents([studentID, studentInfos]+)
I -> nYM : addStudents([studentID, studentInfos]+)
activate nYM
nYM -> SDB :addStudents([studentID, studentInfos]+)
activate SDB
SDB -> nYM : updatingDone()
deactivate SDB
nYM -> I : addingDone()
deactivate nYM
I -> ED : displayMessage("The students have been added")


== Migration ==

ED -> I : initYear()
I -> nYM : initYear()
activate nYM
nYM -> SDB : updateYear()
activate SDB
nYM <- SDB : updatingDone()
deactivate SDB
nYM -> I : initDone()
deactivate nYM
ED <- I : displayMessage("The initialisation of the year is done")
deactivate I
@enduml
